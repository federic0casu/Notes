==================================
   Diffie-Hellman Key Exchange              
==================================

The DHKE protocol was first presented in November 1976 (New Directions in Cryptography, IEEE 
Transactions on Information Theory).

The DHKE protocol is based on a one-way function: discrete logarithm. Is it really difficult to compute 
a discrete logarithm? It depends on the set we are working with. 

Please, pay attention: the DHKE protocol, as the name suggests, is only a key exchange protocol, that
is it could not be used nor to secure communications (encryption) neither to implement a digital signa-
ture scheme.

So, it's time to talk about the mathematical foundations needed by the DHKE protocol:
	
	1) DHKE operates in a multiplicative group called Zp^{*}. The main property of Zp^{*} is that
	   its elements are the set of integers that are coprime to p and smaller than p. In 
	   mathematical terms, the definition of Zp^{*} is as follows:
	   
	   Zp^{*} = {i in Z | i < p and gcd(i, p) = 1}.

	   Moreover, p has a very important property: it's a prime number. Being prime, any integer 
	   in the range [0, p-1] also belongs to Zp^{*}.
	
	2) Primitive element => Let Zp be a multiplicative group. Let g be an element of Zp; g is
	   called generator (or primitive element) if, for any element z in Zp, exists x in Zp such
	   that g^x mod p = z. Also, we can state that an element of a group is called generator if
	   it has maximum order, i.e., card{g} = |Zp|. 
	   
	3) Let p be prime and g in Zp^{*} be a primitive element (or generator). DHKE protocol works
	   with those two parameters: they are public and they could be agreeded a-priori.
	   
	4) DISCRETE LOGARITHM PROBLEM: given a multiplicative group Zp^{*}, where p is prime. Given 
	   a generator of Zp^{p}, g. Given y in Zp^{*} find x such that y = g^x mod p, i.e., 
	   x = log_{g} y mod p
	   
How does DHKE protocol use p and g to securely exchange a key? The DHKE protocol is composed of 2
phases: SETUP phase and ONLINE phase.

SETUP PHASE: Alice and Bob agreed on the "large" prime p and a generator g. There is no need to 
securely store p and g: they can be publicly known.

ONLINE PHASE (key exchange):

	0) Both Alice and Bob compute a random integer. Let's call a the random integer generated by
	   Alice and b the random integer generated by Bob. Random integers a and b are called 
	   ephemeral keys. 
	1) [M1] Alice -> Bob : "Alice", YA = g^a mod p
	2) [M2] Bob -> Alice : "Bob",   YB = g^b mod p
	3) Bob, upon receiving message M1, computes Kab = (YA)^b mod p = (g^a)^b mod p = g^{ab} mod p.
	   After computing Kab, Bob deletes the ephemeral key b.
	3) Alice, upon receiving message M2, computes Kab = (YB)^a mod p = (g^b)^a mod p = g^{ab} mod p
	   After computing Kab, Alice deletes the ephemeral key a.
	
Both Alice and Bob share the same secret key.

So, how secure is the DHKE protocol? The Diffie-Hellman problem is no more secure than the Discrete
Logarithm problem. What does this mean? If an attacker were able to resolve either a = log_{g} YA or 
b = log_{g} YB, then the Diffie-Hellman protocol could be broken.

Another useful property is non-interactivity. What does it mean? To establish a secret shared key,
Bob does not need to synchronously respond to Alice's message. Let's make an example:

	1) Both Alice and Bob publish their public key on their Facebook's account. 
		Alice public key: YA = g^a mod p
		Bob public key: YB = g^b mod p
	2) Alice wants to send a confidential message to Bob. She consults Bob's Facebook account and
	   downloads his public key YB. Then, Alice computes the secret key as Kab = (YB)^a mod p.
	3) Upon receiving Alice's encrypted message, Bob consults Alice's Facebook account and
	   downloads her public key, YA. Similarly to what Alice did, Bob computes the secret key as
	   Kab = (YA)^b mod p = g^{ab} mod p. Now, Bob can correctly decrypt the received message.


==================================
     Man-In-The-Middle Attack              
==================================

As with any public encryption scheme, the DHKE protocol is susceptible to various types of Man-in-the-
Middle (MITM) attacks. Why? Because the protocol lacks authentication!

Let's analyze the attack:

	[M1] Alice --> Bob: "Alice", YA = g^a mod p
	
	(The adversary intercepts message M1 and substitutes YA with YA' = g^c mod p.
	 The adversary controls c, i.e, he generated it.)
	 
	Bob receives "Alice", YA' = g^c mod p. Since there is no authentication/integrity control,
	Bob believes that the message comes from Alice, thus he believes that YA' is Alice's public
	key. Bob computes the shared secret key as Kbc = (g^c)^b mod p = g^{cb} mod p.
	
	[M2] Bob --> Alice: "Bob", YB = g^b mod p
	
	(The adversary intercepts message M2 and substitutes YB with YB' = g^c mod p.
	 As we said before, the adversary controls c, i.e, he generated it.)
	 
	Alice receives "Bob", YB' = g^c mod p. Since there is no authentication/integrity control,
	Alice believes that the message comes from Bob, thus she believes that YB' is Bob's public
	key. Alice computes the shared secret key as Kac = (g^c)^a mod p = g^{ca} mod p.
						
Whenever Alice or Bob sends a message, the adversary intercepts it and decrypts it with the respective
secret key Kbc or Kac. Once the adversary reads what the encrypted message carried, he encrypts it
once again with the respective recipient's secret key.





















 
